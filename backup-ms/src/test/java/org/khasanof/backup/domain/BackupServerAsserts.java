package org.khasanof.backup.domain;

import org.khasanof.backup.domain.common.BackupServer;

import static org.assertj.core.api.Assertions.assertThat;

public class BackupServerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupServerAllPropertiesEquals(BackupServer expected, BackupServer actual) {
        assertBackupServerAutoGeneratedPropertiesEquals(expected, actual);
        assertBackupServerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupServerAllUpdatablePropertiesEquals(BackupServer expected, BackupServer actual) {
        assertBackupServerUpdatableFieldsEquals(expected, actual);
        assertBackupServerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupServerAutoGeneratedPropertiesEquals(BackupServer expected, BackupServer actual) {
        assertThat(expected)
            .as("Verify BackupServer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupServerUpdatableFieldsEquals(BackupServer expected, BackupServer actual) {
        assertThat(expected)
            .as("Verify BackupServer relevant properties")
            .satisfies(e -> assertThat(e.getPort()).as("check port").isEqualTo(actual.getPort()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getHost()).as("check host").isEqualTo(actual.getHost()))
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupServerUpdatableRelationshipsEquals(BackupServer expected, BackupServer actual) {}
}
