package org.khasanof.backup.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BackupJobAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupJobAllPropertiesEquals(BackupJob expected, BackupJob actual) {
        assertBackupJobAutoGeneratedPropertiesEquals(expected, actual);
        assertBackupJobAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupJobAllUpdatablePropertiesEquals(BackupJob expected, BackupJob actual) {
        assertBackupJobUpdatableFieldsEquals(expected, actual);
        assertBackupJobUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupJobAutoGeneratedPropertiesEquals(BackupJob expected, BackupJob actual) {
        assertThat(expected)
            .as("Verify BackupJob auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupJobUpdatableFieldsEquals(BackupJob expected, BackupJob actual) {
        assertThat(expected)
            .as("Verify BackupJob relevant properties")
            .satisfies(e -> assertThat(e.getStartedAt()).as("check startedAt").isEqualTo(actual.getStartedAt()))
            .satisfies(e -> assertThat(e.getFinishedAt()).as("check finishedAt").isEqualTo(actual.getFinishedAt()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupJobUpdatableRelationshipsEquals(BackupJob expected, BackupJob actual) {
        assertThat(expected)
            .as("Verify BackupJob relationships")
            .satisfies(e -> assertThat(e.getBackupFile()).as("check backupFile").isEqualTo(actual.getBackupFile()));
    }
}
