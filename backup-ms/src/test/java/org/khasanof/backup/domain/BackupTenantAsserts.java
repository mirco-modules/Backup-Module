package org.khasanof.backup.domain;

import org.khasanof.backup.domain.common.BackupTenant;

import static org.assertj.core.api.Assertions.assertThat;

public class BackupTenantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupTenantAllPropertiesEquals(BackupTenant expected, BackupTenant actual) {
        assertBackupTenantAutoGeneratedPropertiesEquals(expected, actual);
        assertBackupTenantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupTenantAllUpdatablePropertiesEquals(BackupTenant expected, BackupTenant actual) {
        assertBackupTenantUpdatableFieldsEquals(expected, actual);
        assertBackupTenantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupTenantAutoGeneratedPropertiesEquals(BackupTenant expected, BackupTenant actual) {
        assertThat(expected)
            .as("Verify BackupTenant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupTenantUpdatableFieldsEquals(BackupTenant expected, BackupTenant actual) {
        assertThat(expected)
            .as("Verify BackupTenant relevant properties")
            .satisfies(e -> assertThat(e.getTenantKey()).as("check tenantKey").isEqualTo(actual.getTenantKey()))
            .satisfies(e -> assertThat(e.getDbName()).as("check dbName").isEqualTo(actual.getDbName()))
            .satisfies(e -> assertThat(e.getDbHost()).as("check dbHost").isEqualTo(actual.getDbHost()))
            .satisfies(e -> assertThat(e.getDbPort()).as("check dbPort").isEqualTo(actual.getDbPort()))
            .satisfies(e -> assertThat(e.getDbUsername()).as("check dbUsername").isEqualTo(actual.getDbUsername()))
            .satisfies(e -> assertThat(e.getDbPassword()).as("check dbPassword").isEqualTo(actual.getDbPassword()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBackupTenantUpdatableRelationshipsEquals(BackupTenant expected, BackupTenant actual) {
        assertThat(expected)
            .as("Verify BackupTenant relationships")
            .satisfies(e -> assertThat(e.getSetting()).as("check setting").isEqualTo(actual.getSetting()));
    }
}
